#include <avr/pgmspace.h>
#include <avr/wdt.h>

const byte D023x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x34, 0x32, 0x41, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x41, 0x30, 0x34, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x36, 0x0D, 0x0A};
const byte D023x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x34, 0x31, 0x41, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x41, 0x30, 0x34, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x36, 0x0D, 0x0A};
const byte D023x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x34, 0x36, 0x41, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x41, 0x30, 0x34, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x36, 0x0D, 0x0A};
const byte D023x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x34, 0x35, 0x41, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x37, 0x30, 0x30, 0x41, 0x30, 0x34, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x36, 0x0D, 0x0A};
const byte D026x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x41, 0x30, 0x30, 0x34, 0x32, 0x41, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x41, 0x30, 0x30, 0x41, 0x30, 0x34, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x33, 0x0D, 0x0A};
const byte D026x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x41, 0x30, 0x30, 0x34, 0x31, 0x41, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x41, 0x30, 0x30, 0x41, 0x30, 0x34, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x33, 0x0D, 0x0A};
const byte D028x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x43, 0x30, 0x30, 0x34, 0x32, 0x41, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x43, 0x30, 0x30, 0x41, 0x30, 0x34, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x43, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x31, 0x0D, 0x0A};
const byte D028x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x43, 0x30, 0x30, 0x34, 0x31, 0x41, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x43, 0x30, 0x30, 0x41, 0x30, 0x34, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x43, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x31, 0x0D, 0x0A};
const byte D029x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x34, 0x32, 0x41, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x41, 0x30, 0x34, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x30, 0x0D, 0x0A};
const byte D029x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x34, 0x31, 0x41, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x41, 0x30, 0x34, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x30, 0x0D, 0x0A};
const byte D029x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x34, 0x36, 0x39, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x41, 0x30, 0x34, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x30, 0x0D, 0x0A};
const byte D029x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x34, 0x35, 0x39, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x44, 0x30, 0x30, 0x41, 0x30, 0x34, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x30, 0x0D, 0x0A};
const byte D030x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x34, 0x32, 0x41, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x41, 0x30, 0x34, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x46, 0x0D, 0x0A};
const byte D030x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x34, 0x31, 0x41, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x41, 0x30, 0x34, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x46, 0x0D, 0x0A};
const byte D030x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x34, 0x36, 0x39, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x41, 0x30, 0x34, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x46, 0x0D, 0x0A};
const byte D030x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x34, 0x35, 0x39, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x41, 0x30, 0x34, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x46, 0x0D, 0x0A};
const byte D039x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x37, 0x30, 0x30, 0x34, 0x36, 0x39, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x37, 0x30, 0x30, 0x34, 0x32, 0x39, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x37, 0x30, 0x30, 0x41, 0x30, 0x33, 0x39, 0x0D, 0x0A};
const byte D039x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x37, 0x30, 0x30, 0x34, 0x35, 0x39, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x37, 0x30, 0x30, 0x34, 0x31, 0x39, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x37, 0x30, 0x30, 0x41, 0x30, 0x33, 0x39, 0x0D, 0x0A};
const byte D041x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x34, 0x32, 0x39, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x41, 0x30, 0x33, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x39, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x34, 0x0D, 0x0A};
const byte D041x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x34, 0x31, 0x39, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x41, 0x30, 0x33, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x39, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x34, 0x0D, 0x0A};
const byte D041x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x34, 0x36, 0x39, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x41, 0x30, 0x33, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x39, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x34, 0x0D, 0x0A};
const byte D041x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x34, 0x35, 0x39, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x39, 0x30, 0x30, 0x41, 0x30, 0x33, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x39, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x34, 0x0D, 0x0A};
const byte D042x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x34, 0x32, 0x39, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x41, 0x30, 0x33, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x33, 0x0D, 0x0A};
const byte D042x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x34, 0x31, 0x39, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x41, 0x30, 0x33, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x33, 0x0D, 0x0A};
const byte D042x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x34, 0x36, 0x39, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x41, 0x30, 0x33, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x33, 0x0D, 0x0A};
const byte D042x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x34, 0x35, 0x39, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x41, 0x30, 0x30, 0x41, 0x30, 0x33, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x33, 0x0D, 0x0A};
const byte D043x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x34, 0x32, 0x39, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x41, 0x30, 0x33, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x32, 0x0D, 0x0A};
const byte D043x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x34, 0x31, 0x39, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x41, 0x30, 0x33, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x32, 0x0D, 0x0A};
const byte D043x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x34, 0x36, 0x38, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x41, 0x30, 0x33, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x32, 0x0D, 0x0A};
const byte D043x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x34, 0x35, 0x39, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x42, 0x30, 0x30, 0x41, 0x30, 0x33, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x32, 0x0D, 0x0A};
const byte D044x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x43, 0x30, 0x30, 0x34, 0x32, 0x39, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x43, 0x30, 0x30, 0x41, 0x30, 0x33, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x43, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x31, 0x0D, 0x0A};
const byte D044x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x43, 0x30, 0x30, 0x34, 0x31, 0x39, 0x33, 0x0D, 0x0A, 0x30, 0x30, 0x41, 0x30, 0x33, 0x34, 0x0D, 0x0A, 0x30, 0x30, 0x41, 0x30, 0x33, 0x34, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x43, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x31, 0x0D, 0x0A};
const byte D044x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x43, 0x30, 0x30, 0x34, 0x36, 0x38, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x43, 0x30, 0x30, 0x41, 0x30, 0x33, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x43, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x31, 0x0D, 0x0A};
const byte D044x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x43, 0x30, 0x30, 0x34, 0x35, 0x38, 0x46, 0x0D, 0x0A, 0x34, 0x0D, 0x0A, 0x34, 0x0D, 0x0A, 0x30, 0x32, 0x43, 0x30, 0x30, 0x41, 0x30, 0x33, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x43, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x31, 0x0D, 0x0A};
const byte D045x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x34, 0x32, 0x39, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x41, 0x30, 0x33, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x30, 0x0D, 0x0A};
const byte D045x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x34, 0x31, 0x39, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x41, 0x30, 0x33, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x30, 0x0D, 0x0A};
const byte D045x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x34, 0x36, 0x38, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x41, 0x30, 0x33, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x30, 0x0D, 0x0A};
const byte D045x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x34, 0x35, 0x38, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x41, 0x30, 0x33, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x44, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x30, 0x0D, 0x0A};
const byte D046x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x34, 0x32, 0x39, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x41, 0x30, 0x33, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x46, 0x0D, 0x0A};
const byte D046x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x34, 0x31, 0x39, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x41, 0x30, 0x33, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x46, 0x0D, 0x0A};
const byte D046x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x34, 0x36, 0x38, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x41, 0x30, 0x33, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x46, 0x0D, 0x0A};
const byte D046x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x34, 0x35, 0x38, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x45, 0x30, 0x30, 0x41, 0x30, 0x33, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x45, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x46, 0x0D, 0x0A};
const byte D047x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x34, 0x32, 0x38, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x41, 0x30, 0x33, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x45, 0x0D, 0x0A};
const byte D047x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x34, 0x31, 0x39, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x41, 0x30, 0x33, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x45, 0x0D, 0x0A};
const byte D047x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x34, 0x36, 0x38, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x41, 0x30, 0x33, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x45, 0x0D, 0x0A};
const byte D047x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x34, 0x35, 0x38, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x46, 0x30, 0x30, 0x41, 0x30, 0x33, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x45, 0x0D, 0x0A};
const byte D048x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x34, 0x32, 0x38, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x41, 0x30, 0x33, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x44, 0x0D, 0x0A};
const byte D048x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x34, 0x31, 0x38, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x41, 0x30, 0x33, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x44, 0x0D, 0x0A};
const byte D048x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x34, 0x36, 0x38, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x41, 0x30, 0x33, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x44, 0x0D, 0x0A};
const byte D048x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x34, 0x35, 0x38, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x41, 0x30, 0x33, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x44, 0x0D, 0x0A};
const byte D053x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x34, 0x32, 0x38, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x41, 0x30, 0x32, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x38, 0x0D, 0x0A};
const byte D053x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x34, 0x31, 0x38, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x41, 0x30, 0x32, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x38, 0x0D, 0x0A};
const byte D053x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x34, 0x36, 0x38, 0x35, 0x0D, 0x0A, 0x32, 0x42, 0x0D, 0x0A, 0x32, 0x42, 0x0D, 0x0A, 0x33, 0x35, 0x30, 0x30, 0x41, 0x30, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x38, 0x0D, 0x0A};
const byte D053x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x34, 0x35, 0x38, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x35, 0x30, 0x30, 0x41, 0x30, 0x32, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x38, 0x0D, 0x0A};
const byte D058x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x34, 0x32, 0x38, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x41, 0x30, 0x32, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x33, 0x0D, 0x0A};
const byte D058x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x34, 0x31, 0x38, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x41, 0x30, 0x32, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x33, 0x0D, 0x0A};
const byte D058x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x34, 0x36, 0x38, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x41, 0x30, 0x32, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x33, 0x0D, 0x0A};
const byte D058x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x34, 0x35, 0x38, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x41, 0x30, 0x30, 0x41, 0x30, 0x32, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x33, 0x0D, 0x0A};
const byte D110x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x34, 0x36, 0x34, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x34, 0x32, 0x35, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x41, 0x30, 0x46, 0x32, 0x0D, 0x0A};
const byte D110x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x34, 0x35, 0x34, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x34, 0x31, 0x35, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x41, 0x30, 0x46, 0x32, 0x0D, 0x0A};
const byte D116x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x37, 0x34, 0x30, 0x30, 0x34, 0x36, 0x34, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x37, 0x34, 0x30, 0x30, 0x34, 0x32, 0x34, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x37, 0x34, 0x30, 0x30, 0x41, 0x30, 0x45, 0x43, 0x0D, 0x0A};
const byte D116x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x37, 0x34, 0x30, 0x30, 0x34, 0x35, 0x34, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x37, 0x34, 0x30, 0x30, 0x34, 0x31, 0x34, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x37, 0x34, 0x30, 0x30, 0x41, 0x30, 0x45, 0x43, 0x0D, 0x0A};
const byte D135x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x34, 0x32, 0x33, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x41, 0x30, 0x44, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x36, 0x0D, 0x0A};
const byte D135x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x34, 0x31, 0x33, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x41, 0x30, 0x44, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x36, 0x0D, 0x0A};
const byte D135x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x34, 0x36, 0x33, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x41, 0x30, 0x44, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x36, 0x0D, 0x0A};
const byte D135x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x34, 0x35, 0x33, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x37, 0x30, 0x30, 0x41, 0x30, 0x44, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x37, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x36, 0x0D, 0x0A};

int S;
int k;
int u;
unsigned int D;


void setup() {
  pinMode(13, OUTPUT);    //LED indikatorius zalias
  pinMode(12, OUTPUT);    //LED indikatorius raudonas
  pinMode(2, INPUT);      //evakuacija start
  Serial.begin(9600);
  wdt_enable(WDTO_8S);
}
void loop() {
  S = 0;
  delay(700);
  digitalWrite(13, HIGH);
  delay(700);
  digitalWrite(13, LOW);
  wdt_reset();
  if (digitalRead(2) == HIGH)                                                               // jei 2 high - atrakinam
  {
    digitalWrite(12, HIGH);
    delay(1500);
    if (S < 1) {
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D023x1l + k);            // 23.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D023x2l + k);            // 23.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D026x1l + k);            // 26.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D028x1l + k);            // 28.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D029x1l + k);            // 29.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D029x2l + k);            // 29.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D030x1l + k);            // 30.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D030x2l + k);            // 30.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D039x1l + k);            // 39.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D041x1l + k);            // 41.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D041x2l + k);            // 41.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D042x1l + k);            // 42.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D042x2l + k);            // 42.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D043x1l + k);            // 43.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D043x2l + k);            // 43.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D044x1l + k);            // 44.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D044x2l + k);            // 44.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D045x1l + k);            // 45.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D045x2l + k);            // 45.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D046x1l + k);            // 46.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D046x2l + k);            // 46.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D047x1l + k);            // 47.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D047x2l + k);            // 47.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D048x1l + k);            // 48.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D048x2l + k);            // 48.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D053x1l + k);            // 53.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D053x2l + k);            // 53.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D058x1l + k);            // 58.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D058x2l + k);            // 58.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D110x1l + k);            // 110.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D116x1l + k);            // 116.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D135x1l + k);            // 135.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D135x2l + k);            // 135.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      digitalWrite(12, LOW);
      wdt_reset();
      S = S++;
    }
atrakinam:
    delay(700);
    digitalWrite(12, HIGH);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D023x1u + k);            // 23.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D023x2u + k);            // 23.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D026x1u + k);            // 26.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D028x1u + k);            // 28.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D029x1u + k);            // 29.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D029x2u + k);            // 29.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D030x1u + k);            // 30.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D030x2u + k);            // 30.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D039x1u + k);            // 39.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D041x1u + k);            // 41.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D041x2u + k);            // 41.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D042x1u + k);            // 42.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D042x2u + k);            // 42.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D043x1u + k);            // 43.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D043x2u + k);            // 43.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D044x1u + k);            // 44.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D044x2u + k);            // 44.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D045x1u + k);            // 45.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D045x2u + k);            // 45.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D046x1u + k);            // 46.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D046x2u + k);            // 46.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D047x1u + k);            // 47.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D047x2u + k);            // 47.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D048x1u + k);            // 48.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D048x2u + k);            // 48.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D053x1u + k);            // 53.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D053x2u + k);            // 53.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D058x1u + k);            // 58.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D058x2u + k);            // 58.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D110x1u + k);            // 110.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D116x1u + k);            // 116.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D135x1u + k);            // 135.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D135x2u + k);            // 135.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    wdt_reset();
uzrakinam:
    if (digitalRead(2) == LOW)                                                  // jei 2 low - uzrakinam


      for (u = 0; u < 6; u++) {
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D023x1l + k);            // 23.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D023x2l + k);            // 23.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D026x1l + k);            // 26.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D028x1l + k);            // 28.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D029x1l + k);            // 29.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D029x2l + k);            // 29.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D030x1l + k);            // 30.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D030x2l + k);            // 30.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D039x1l + k);            // 39.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D041x1l + k);            // 41.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D041x2l + k);            // 41.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D042x1l + k);            // 42.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D042x2l + k);            // 42.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D043x1l + k);            // 43.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D043x2l + k);            // 43.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D044x1l + k);            // 44.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D044x2l + k);            // 44.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D045x1l + k);            // 45.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D045x2l + k);            // 45.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D046x1l + k);            // 46.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D046x2l + k);            // 46.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D047x1l + k);            // 47.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D047x2l + k);            // 47.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D048x1l + k);            // 48.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D048x2l + k);            // 48.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D053x1l + k);            // 53.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D053x2l + k);            // 53.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D058x1l + k);            // 58.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D058x2l + k);            // 58.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D110x1l + k);            // 110.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D116x1l + k);            // 116.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D135x1l + k);            // 135.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D135x2l + k);            // 135.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(200);
        wdt_reset();
        u = u++;
      }
    if (digitalRead(2) == HIGH)
    {
      goto atrakinam;
    }

    digitalWrite(12, LOW);
  }
}
