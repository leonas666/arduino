#include <avr/pgmspace.h>
#include <avr/wdt.h>

const byte D037x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x35, 0x30, 0x30, 0x34, 0x32, 0x39, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x35, 0x30, 0x30, 0x41, 0x30, 0x33, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x38, 0x0D, 0x0A};
const byte D037x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x35, 0x30, 0x30, 0x34, 0x31, 0x39, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x35, 0x30, 0x30, 0x41, 0x30, 0x33, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x38, 0x0D, 0x0A};
const byte D052x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x34, 0x32, 0x38, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x41, 0x30, 0x32, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x34, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x39, 0x0D, 0x0A};
const byte D052x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x34, 0x31, 0x38, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x41, 0x30, 0x32, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x34, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x39, 0x0D, 0x0A};
const byte D052x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x34, 0x36, 0x38, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x41, 0x30, 0x32, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x34, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x39, 0x0D, 0x0A};
const byte D052x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x34, 0x35, 0x38, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x33, 0x34, 0x30, 0x30, 0x41, 0x30, 0x32, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x33, 0x34, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x33, 0x39, 0x0D, 0x0A};
const byte D064x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x34, 0x32, 0x37, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x41, 0x30, 0x32, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x44, 0x0D, 0x0A};
const byte D064x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x34, 0x31, 0x37, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x41, 0x30, 0x32, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x44, 0x0D, 0x0A};
const byte D064x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x34, 0x36, 0x37, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x41, 0x30, 0x32, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x44, 0x0D, 0x0A};
const byte D064x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x34, 0x35, 0x37, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x41, 0x30, 0x32, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x44, 0x0D, 0x0A};
const byte D065x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x34, 0x32, 0x37, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x41, 0x30, 0x31, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x43, 0x0D, 0x0A};
const byte D065x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x34, 0x31, 0x37, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x41, 0x30, 0x31, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x43, 0x0D, 0x0A};
const byte D065x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x34, 0x36, 0x37, 0x39, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x41, 0x30, 0x31, 0x46, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x43, 0x0D, 0x0A};
const byte D065x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x34, 0x35, 0x37, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x31, 0x30, 0x30, 0x41, 0x30, 0x31, 0x46, 0x0D, 0x0A, 0x34, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x31, 0x30, 0x30, 0x32, 0x43, 0x0D, 0x0A};
const byte D066x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x34, 0x32, 0x37, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x41, 0x30, 0x31, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x42, 0x0D, 0x0A};
const byte D066x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x34, 0x31, 0x37, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x41, 0x30, 0x31, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x42, 0x0D, 0x0A};
const byte D066x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x34, 0x36, 0x37, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x41, 0x30, 0x31, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x42, 0x0D, 0x0A};
const byte D066x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x34, 0x35, 0x37, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30, 0x41, 0x30, 0x31, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x42, 0x0D, 0x0A};
const byte D074x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x41, 0x30, 0x30, 0x34, 0x32, 0x37, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x41, 0x30, 0x30, 0x41, 0x30, 0x31, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x33, 0x0D, 0x0A};
const byte D074x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x41, 0x30, 0x30, 0x34, 0x31, 0x37, 0x35, 0x0D, 0x0A, 0x34, 0x41, 0x30, 0x30, 0x41, 0x30, 0x31, 0x36, 0x0D, 0x0A, 0x34, 0x41, 0x30, 0x30, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x33, 0x0D, 0x0A};
const byte D074x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x41, 0x30, 0x30, 0x34, 0x36, 0x37, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x41, 0x30, 0x30, 0x41, 0x30, 0x31, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x33, 0x0D, 0x0A};
const byte D074x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x41, 0x30, 0x30, 0x34, 0x35, 0x37, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x41, 0x30, 0x30, 0x41, 0x30, 0x31, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x41, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x33, 0x0D, 0x0A};
const byte D075x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x34, 0x32, 0x37, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x41, 0x30, 0x31, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x32, 0x0D, 0x0A};
const byte D075x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x34, 0x31, 0x37, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x41, 0x30, 0x31, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x32, 0x0D, 0x0A};
const byte D075x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x34, 0x36, 0x36, 0x46, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x41, 0x30, 0x31, 0x35, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x32, 0x0D, 0x0A};
const byte D075x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x34, 0x35, 0x37, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x42, 0x30, 0x30, 0x41, 0x30, 0x31, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x42, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x32, 0x32, 0x0D, 0x0A};
const byte D079x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x34, 0x32, 0x36, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x41, 0x30, 0x31, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x45, 0x0D, 0x0A};
const byte D079x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x34, 0x31, 0x37, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x41, 0x30, 0x31, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x45, 0x0D, 0x0A};
const byte D079x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x34, 0x36, 0x36, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x41, 0x30, 0x31, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x45, 0x0D, 0x0A};
const byte D079x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x34, 0x35, 0x36, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x34, 0x46, 0x30, 0x30, 0x41, 0x30, 0x31, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x34, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x45, 0x0D, 0x0A};
const byte D080x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x32, 0x36, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x30, 0x31, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x44, 0x0D, 0x0A};
const byte D080x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x31, 0x36, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x30, 0x31, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x44, 0x0D, 0x0A};
const byte D080x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x36, 0x36, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x30, 0x31, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x44, 0x0D, 0x0A};
const byte D080x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x35, 0x36, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x30, 0x31, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x44, 0x0D, 0x0A};
const byte D081x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x34, 0x32, 0x36, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x41, 0x30, 0x30, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x43, 0x0D, 0x0A};
const byte D081x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x34, 0x31, 0x36, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x41, 0x30, 0x30, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x43, 0x0D, 0x0A};
const byte D081x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x34, 0x36, 0x36, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x41, 0x30, 0x30, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x43, 0x0D, 0x0A};
const byte D081x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x34, 0x35, 0x36, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x31, 0x30, 0x30, 0x41, 0x30, 0x30, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x31, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x43, 0x0D, 0x0A};
const byte D082x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x34, 0x32, 0x36, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x41, 0x30, 0x30, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x42, 0x0D, 0x0A};
const byte D082x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x34, 0x31, 0x36, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x41, 0x30, 0x30, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x42, 0x0D, 0x0A};
const byte D082x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x34, 0x36, 0x36, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x41, 0x30, 0x30, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x42, 0x0D, 0x0A};
const byte D082x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x34, 0x35, 0x36, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x41, 0x30, 0x30, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x31, 0x42, 0x0D, 0x0A};
const byte D095x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x34, 0x32, 0x35, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x41, 0x30, 0x30, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x30, 0x45, 0x0D, 0x0A};
const byte D095x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x34, 0x31, 0x36, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x41, 0x30, 0x30, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x30, 0x45, 0x0D, 0x0A};
const byte D095x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x34, 0x36, 0x35, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x41, 0x30, 0x30, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x30, 0x45, 0x0D, 0x0A};
const byte D095x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x34, 0x35, 0x35, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x35, 0x46, 0x30, 0x30, 0x41, 0x30, 0x30, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x35, 0x46, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x30, 0x45, 0x0D, 0x0A};
const byte D107x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x36, 0x42, 0x30, 0x30, 0x34, 0x36, 0x34, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x42, 0x30, 0x30, 0x34, 0x32, 0x35, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x42, 0x30, 0x30, 0x41, 0x30, 0x46, 0x35, 0x0D, 0x0A};
const byte D107x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x36, 0x42, 0x30, 0x30, 0x34, 0x35, 0x35, 0x30, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x42, 0x30, 0x30, 0x34, 0x31, 0x35, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x36, 0x42, 0x30, 0x30, 0x41, 0x30, 0x46, 0x35, 0x0D, 0x0A};
const byte D133x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x34, 0x32, 0x33, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x41, 0x30, 0x44, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x38, 0x0D, 0x0A};
const byte D133x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x34, 0x31, 0x33, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x41, 0x30, 0x44, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x38, 0x0D, 0x0A};
const byte D133x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x34, 0x36, 0x33, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x41, 0x30, 0x44, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x38, 0x0D, 0x0A};
const byte D133x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x34, 0x35, 0x33, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x35, 0x30, 0x30, 0x41, 0x30, 0x44, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x35, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x38, 0x0D, 0x0A};
const byte D134x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x36, 0x30, 0x30, 0x34, 0x36, 0x33, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x36, 0x30, 0x30, 0x41, 0x30, 0x44, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x36, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x37, 0x0D, 0x0A};
const byte D134x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x36, 0x30, 0x30, 0x34, 0x35, 0x33, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x36, 0x30, 0x30, 0x41, 0x30, 0x44, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x36, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x37, 0x0D, 0x0A};
const byte D136x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x38, 0x30, 0x30, 0x34, 0x36, 0x33, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x38, 0x30, 0x30, 0x41, 0x30, 0x44, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x38, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x35, 0x0D, 0x0A};
const byte D136x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x38, 0x30, 0x30, 0x34, 0x35, 0x33, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x38, 0x30, 0x30, 0x41, 0x30, 0x44, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x38, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x35, 0x0D, 0x0A};

int S;
int k;
int u;
unsigned int D;


void setup() {
  pinMode(13, OUTPUT);    //LED indikatorius zalias
  pinMode(12, OUTPUT);    //LED indikatorius raudonas
  pinMode(2, INPUT);      //evakuacija start
  Serial.begin(9600);
  wdt_enable(WDTO_8S);
}
void loop() {
  S = 0;
  delay(700);
  digitalWrite(13, HIGH);
  delay(700);
  digitalWrite(13, LOW);
  wdt_reset();
  if (digitalRead(2) == HIGH)                                                               // jei 2 high - atrakinam
  {
    digitalWrite(12, HIGH);
    delay(1500);
    if (S < 1) {
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D037x1l + k);            // 37.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D052x1l + k);            // 52.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D052x2l + k);            // 52.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D064x1l + k);            // 64.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D064x2l + k);            // 64.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D065x1l + k);            // 65.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D065x2l + k);            // 65.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D066x1l + k);            // 66.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D066x2l + k);            // 66.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D074x1l + k);            // 74.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D074x2l + k);            // 74.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D075x1l + k);            // 75.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D075x2l + k);            // 75.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D079x1l + k);            // 79.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D079x2l + k);            // 79.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D080x1l + k);            // 80.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D080x2l + k);            // 80.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D081x1l + k);            // 81.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D081x2l + k);            // 81.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D082x1l + k);            // 82.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D082x2l + k);            // 82.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D095x1l + k);            // 95.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D095x2l + k);            // 95.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D107x1l + k);            // 107.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D133x1l + k);            // 133.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D133x2l + k);            // 133.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D134x2l + k);            // 134.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D136x2l + k);            // 136.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      digitalWrite(12, LOW);
      wdt_reset();
      S = S++;
    }


atrakinam:
    delay(700);
    digitalWrite(12, HIGH);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D037x1u + k);            // 37.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D052x1u + k);            // 52.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D052x2u + k);            // 52.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D064x1u + k);            // 64.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D064x2u + k);            // 64.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D065x1u + k);            // 65.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D065x2u + k);            // 65.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D066x1u + k);            // 66.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D066x2u + k);            // 66.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D074x1u + k);            // 74.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D074x2u + k);            // 74.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D075x1u + k);            // 75.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D075x2u + k);            // 75.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D079x1u + k);            // 79.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D079x2u + k);            // 79.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D080x1u + k);            // 80.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D080x2u + k);            // 80.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D081x1u + k);            // 81.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D081x2u + k);            // 81.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D082x1u + k);            // 82.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D082x2u + k);            // 82.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D095x1u + k);            // 95.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D095x2u + k);            // 95.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D107x1u + k);            // 107.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D133x1u + k);            // 133.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D133x2u + k);            // 133.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D134x2u + k);            // 134.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D136x2u + k);            // 136.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    wdt_reset();
uzrakinam:
    if (digitalRead(2) == LOW)                                                  // jei 2 low - uzrakinam


      for (u = 0; u < 6; u++) {
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D037x1l + k);            // 37.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D052x1l + k);            // 52.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D052x2l + k);            // 52.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D064x1l + k);            // 64.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D064x2l + k);            // 64.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D065x1l + k);            // 65.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D065x2l + k);            // 65.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D066x1l + k);            // 66.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D066x2l + k);            // 66.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D074x1l + k);            // 74.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D074x2l + k);            // 74.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D075x1l + k);            // 75.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D075x2l + k);            // 75.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D079x1l + k);            // 79.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D079x2l + k);            // 79.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D080x1l + k);            // 80.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D080x2l + k);            // 80.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D081x1l + k);            // 81.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D081x2l + k);            // 81.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D082x1l + k);            // 82.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D082x2l + k);            // 82.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D095x1l + k);            // 95.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D095x2l + k);            // 95.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D107x1l + k);            // 107.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D133x1l + k);            // 133.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D133x2l + k);            // 133.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D134x2l + k);            // 134.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D136x2l + k);            // 136.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(200);
        wdt_reset();
        u = u++;
      }
    if (digitalRead(2) == HIGH)
    {
      goto atrakinam;
    }

    digitalWrite(12, LOW);
  }
}
