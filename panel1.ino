#include <avr/pgmspace.h>
#include <avr/wdt.h>

const byte D001x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x34, 0x32, 0x42, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x41, 0x30, 0x35, 0x46, 0x0D, 0x0A};
const byte D001x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x34, 0x31, 0x42, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x41, 0x30, 0x35, 0x46, 0x0D, 0x0A};
const byte D001x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x34, 0x36, 0x42, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x41, 0x30, 0x35, 0x46, 0x0D, 0x0A};
const byte D001x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x34, 0x35, 0x42, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x41, 0x30, 0x35, 0x46, 0x0D, 0x0A};
const byte D002x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x34, 0x32, 0x42, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x46, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x41, 0x30, 0x35, 0x45, 0x0D, 0x0A};
const byte D002x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x34, 0x31, 0x42, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x46, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x41, 0x30, 0x35, 0x45, 0x0D, 0x0A};
const byte D003x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x34, 0x32, 0x42, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x41, 0x30, 0x35, 0x44, 0x0D, 0x0A};
const byte D003x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x34, 0x31, 0x42, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x41, 0x30, 0x35, 0x44, 0x0D, 0x0A};
const byte D003x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x34, 0x36, 0x42, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x41, 0x30, 0x35, 0x44, 0x0D, 0x0A};
const byte D003x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x34, 0x35, 0x42, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x41, 0x30, 0x35, 0x44, 0x0D, 0x0A};
const byte D004x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x34, 0x32, 0x42, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x41, 0x30, 0x35, 0x43, 0x0D, 0x0A};
const byte D004x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x34, 0x31, 0x42, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x41, 0x30, 0x35, 0x43, 0x0D, 0x0A};
const byte D004x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x34, 0x36, 0x42, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x41, 0x30, 0x35, 0x43, 0x0D, 0x0A};
const byte D004x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x34, 0x35, 0x42, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x41, 0x30, 0x35, 0x43, 0x0D, 0x0A};
const byte D005x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x34, 0x32, 0x42, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x41, 0x30, 0x35, 0x42, 0x0D, 0x0A};
const byte D005x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x34, 0x31, 0x42, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x41, 0x30, 0x35, 0x42, 0x0D, 0x0A};
const byte D005x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x34, 0x36, 0x42, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x41, 0x30, 0x35, 0x42, 0x0D, 0x0A};
const byte D005x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x34, 0x35, 0x42, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x41, 0x30, 0x35, 0x42, 0x0D, 0x0A};
const byte D006x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x34, 0x32, 0x42, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x41, 0x30, 0x35, 0x41, 0x0D, 0x0A};
const byte D006x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x34, 0x31, 0x42, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x41, 0x30, 0x35, 0x41, 0x0D, 0x0A};
const byte D006x2u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x34, 0x36, 0x42, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x41, 0x30, 0x35, 0x41, 0x0D, 0x0A};
const byte D006x2l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x34, 0x35, 0x42, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x41, 0x30, 0x35, 0x41, 0x0D, 0x0A};
const byte D007x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x34, 0x32, 0x42, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x41, 0x30, 0x35, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x46, 0x39, 0x0D, 0x0A};
const byte D007x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x34, 0x31, 0x42, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x46, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x41, 0x30, 0x35, 0x39, 0x0D, 0x0A};
const byte D008x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x34, 0x32, 0x42, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x41, 0x30, 0x35, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x46, 0x38, 0x0D, 0x0A};
const byte D008x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x34, 0x31, 0x42, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x34, 0x31, 0x42, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x41, 0x30, 0x35, 0x38, 0x0D, 0x0A};
const byte D009x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x34, 0x32, 0x42, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x46, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x41, 0x30, 0x35, 0x37, 0x0D, 0x0A};
const byte D009x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x34, 0x31, 0x42, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x46, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x41, 0x30, 0x35, 0x37, 0x0D, 0x0A};
const byte D011x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x34, 0x32, 0x42, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x41, 0x30, 0x35, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x30, 0x30, 0x46, 0x35, 0x0D, 0x0A};
const byte D011x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x34, 0x31, 0x42, 0x34, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x41, 0x30, 0x35, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x30, 0x30, 0x46, 0x35, 0x0D, 0x0A};
const byte D013x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x34, 0x32, 0x42, 0x31, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x30, 0x30, 0x46, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x41, 0x30, 0x35, 0x33, 0x0D, 0x0A};
const byte D013x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x34, 0x31, 0x42, 0x32, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x41, 0x30, 0x35, 0x33, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x30, 0x30, 0x46, 0x33, 0x0D, 0x0A};
const byte D018x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x34, 0x32, 0x41, 0x43, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x41, 0x30, 0x34, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x42, 0x0D, 0x0A};
const byte D018x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x34, 0x31, 0x41, 0x44, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x41, 0x30, 0x34, 0x45, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x31, 0x32, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x35, 0x42, 0x0D, 0x0A};
const byte D038x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x36, 0x30, 0x30, 0x34, 0x32, 0x39, 0x38, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x36, 0x30, 0x30, 0x41, 0x30, 0x33, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x36, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x37, 0x0D, 0x0A};
const byte D038x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x32, 0x36, 0x30, 0x30, 0x34, 0x31, 0x39, 0x39, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x32, 0x36, 0x30, 0x30, 0x41, 0x30, 0x33, 0x41, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x32, 0x36, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x34, 0x37, 0x0D, 0x0A};
const byte D137x1u[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x39, 0x30, 0x30, 0x34, 0x32, 0x33, 0x35, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x39, 0x30, 0x30, 0x41, 0x30, 0x44, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x39, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x34, 0x0D, 0x0A};
const byte D137x1l[] PROGMEM =  {0x00, 0x3A, 0x30, 0x30, 0x38, 0x39, 0x30, 0x30, 0x34, 0x31, 0x33, 0x36, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x30, 0x38, 0x39, 0x30, 0x30, 0x41, 0x30, 0x44, 0x37, 0x0D, 0x0A, 0x00, 0x3A, 0x30, 0x34, 0x38, 0x39, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x34, 0x43, 0x46, 0x46, 0x43, 0x45, 0x34, 0x0D, 0x0A};

int S;
int k;
int u;
unsigned int D;


void setup() {
  pinMode(13, OUTPUT);    //LED indikatorius zalias
  pinMode(12, OUTPUT);    //LED indikatorius raudonas
  pinMode(11, OUTPUT);    //LED indikatorius raudonas apacioje
  pinMode(2, INPUT);      //evakuacija start
  pinMode(4, OUTPUT);     //Rele RS485 takeover
  Serial.begin(9600);
  wdt_enable(WDTO_8S);

}
void loop() {
  S = 0;
  delay(700);
  digitalWrite(13, HIGH);
  delay(700);
  digitalWrite(13, LOW);
  wdt_reset();
  if (digitalRead(2) == HIGH)                                                               // jei 2 high - atrakinam
  {
    digitalWrite(4, HIGH);
    digitalWrite(12, HIGH);
    digitalWrite(11, HIGH);
    delay(300);
    if (S < 1) {
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D001x1l + k);            // 1.1 duru uzrakinimas
        Serial.write(D);                           //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D001x2l + k);            // 1.2 duru uzrakinimas
        Serial.write(D);                           //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D002x1l + k);            // 2.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D003x1l + k);            // 3.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D003x2l + k);            // 3.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D004x1l + k);            // 4.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D004x2l + k);            // 4.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D005x1l + k);            // 5.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D005x2l + k);            // 5.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D006x1l + k);            // 6.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D006x2l + k);            // 6.2 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D007x1l + k);            // 7.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D008x1l + k);            // 8.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D009x1l + k);            // 9.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                  //
        D = pgm_read_byte(D011x1l + k);            // 11.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 42; k++) {                   //
        D = pgm_read_byte(D013x1l + k);            // 13.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D018x1l + k);            // 18.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                  //
        D = pgm_read_byte(D038x1l + k);            // 38.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      for (k = 0; k < 50; k++) {                   //
        D = pgm_read_byte(D137x1l + k);            // 137.1 duru uzrakinimas
        Serial.write(D);                          //
      }
      delay(40);
      digitalWrite(12, LOW);
      wdt_reset();
      S = S++;
    }

atrakinam:
    delay(700);
    digitalWrite(12, HIGH);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D001x1u + k);            // 1.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D001x2u + k);            // 1.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D002x1u + k);            // 2.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D003x1u + k);            // 3.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D003x2u + k);            // 3.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D004x1u + k);            // 4.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D004x2u + k);            // 4.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D005x1u + k);            // 5.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D005x2u + k);            // 5.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D006x1u + k);            // 6.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D006x2u + k);            // 6.2 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D007x1u + k);            // 7.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D008x1u + k);            // 8.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D009x1u + k);            // 9.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                  //
      D = pgm_read_byte(D011x1u + k);            // 11.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 42; k++) {                   //
      D = pgm_read_byte(D013x1u + k);            // 13.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D018x1u + k);            // 18.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                  //
      D = pgm_read_byte(D038x1u + k);            // 38.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    for (k = 0; k < 50; k++) {                   //
      D = pgm_read_byte(D137x1u + k);            // 137.1 duru atrakinimas
      Serial.write(D);                          //
    }
    delay(40);
    wdt_reset();

uzrakinam:
    if (digitalRead(2) == LOW)                                                  // jei 2 low - uzrakinam


      for (u = 0; u < 6; u++) {
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D001x1l + k);            // 1.1 duru uzrakinimas
          Serial.write(D);                           //
        }
        delay(40);
        digitalWrite(11, LOW);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D001x2l + k);            // 1.2 duru uzrakinimas
          Serial.write(D);                           //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D002x1l + k);            // 2.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D003x1l + k);            // 3.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D003x2l + k);            // 3.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D004x1l + k);            // 4.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D004x2l + k);            // 4.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D005x1l + k);            // 5.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D005x2l + k);            // 5.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D006x1l + k);            // 6.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D006x2l + k);            // 6.2 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D007x1l + k);            // 7.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D008x1l + k);            // 8.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D009x1l + k);            // 9.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                  //
          D = pgm_read_byte(D011x1l + k);            // 11.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 42; k++) {                   //
          D = pgm_read_byte(D013x1l + k);            // 13.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D018x1l + k);            // 18.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                  //
          D = pgm_read_byte(D038x1l + k);            // 38.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(40);
        for (k = 0; k < 50; k++) {                   //
          D = pgm_read_byte(D137x1l + k);            // 137.1 duru uzrakinimas
          Serial.write(D);                          //
        }
        delay(200);
        wdt_reset();
        u = u++;
      }
    if (digitalRead(2) == HIGH)
    {
      goto atrakinam;
    }
    wdt_reset();
    delay(5000);
    wdt_reset();
    delay(5000);
    digitalWrite(12, LOW);
    digitalWrite(4, LOW);

  }
}
